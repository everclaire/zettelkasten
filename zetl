#!/usr/bin/env python3

import json
import sys
import json
from cli import parser

try:
    import httpx
except ModuleNotFoundError:
    print("Error: zetl requires httpx")
    sys.exit(1)

try:
    from kazoo.client import KazooClient
except ImportError:
    print("Error: zetl requires kazoo")
    sys.exit(1)

def main():
    args = parser()
    colors = TextColors()
    ## Zookeeper four letter word commands
    try:
        args.which == "cmd"
        if args.leader == True:
            leader_json = Commands(args, colors).leader()
            print(f"{colors.HEADER}{colors.UNDERLINE}-----ZK-----{colors.ENDC}")
            print(f"Zookeeper leader: {colors.OKGREEN}{leader_json['leader_ip']}{colors.ENDC}")
            sys.exit(0)
        elif args.cluster == True:
            kafka_brokers = Commands(args, colors).cluster()
            print(f"{colors.HEADER}{colors.UNDERLINE}-----ZK-----{colors.ENDC}")
            print(f"{colors.OKGREEN}{kafka_brokers}{colors.ENDC}")
            sys.exit(0)
        else:
            print("Four letter commands")
            sys.exit(0)
    except:
        pass
    ## Kafka cluster information
    try:
        args.which == "kafka"
        if args.brokers == True:
            kafka_brokers= Kafka(args,colors).brokers()
            print(f'{colors.HEADER}{colors.UNDERLINE}-----KAFKA-----{colors.ENDC}')
            print(f"{colors.OKGREEN}{kafka_brokers}{colors.ENDC}")
            sys.exit(0)
        else:
            print("Kafka cluster commands")
    except:
        pass

    sys.exit(0)

## Zookeeper 4LW commands
class Commands():
    def __init__(self, args, colors):
        self.args = args
        self.colors = colors
        self.url = f"{args.protocol}://{args.addr}:{args.port}"
        self.status = { "connected": "",
                        "error": "",
                        "status_code": "",
                        "exit_code": "" }

    def leader(self):
        status = self._zk_error()
        url = f"{self.url}/commands/leader"
        if status['connected'] == True:
            try:
                response = httpx.get(url)
                ## Return JSON response
                return response.json()
            except:
                print(f"{self.colors.FAIL}Error: Unable to connect to Zookeeper cluster{self.colors.ENDC}")
                sys.exit(status['exit_code'])
        else:
            print(f"{self.colors.FAIL}Error: Connection timeout when connecting to: {self.url}{self.colors.ENDC}")
            sys.exit(status['exit_code'])

    def cluster(self):
        status = self._zk_error()
        server_list = ""
        if status['connected'] == True:
            try:
                leader = self.leader()['leader_ip']
                followers = self._get_zk_followers()
                for i in followers:
                    if leader != i:
                        server_list += f"{i}\n"
                    else:
                        server_list += f"{i} *\n"

                return server_list.strip()
            except:
                print(f"{self.colors.FAIL}Error: Unable to connect to Zookeeper cluster{self.colors.ENDC}")
                sys.exit(status['exit_code'])
        else:
            print(f"{self.colors.FAIL}Error: Connection timeout when connecting to: {self.url}{self.colors.ENDC}")
            sys.exit(status['exit_code'])

    def _zk_error(self):
        status = self.status
        try:
            response = httpx.get(self.url)
            status['connected'] = True
            status['error'] = False
            status['status_code'] = response.status_code
            status['exit_code'] = 0
        except httpx.ConnectError:
            status['connected'] = False
            status['error'] = True
            status['status_code'] = ""
            status['exit_code'] = 1
        
        return status

    def _get_zk_followers(self):
        status = self._zk_error()
        url = f"{self.url}/commands/voting_view"
        if status['connected'] == True:
            try:
                servers = []
                response = httpx.get(url)
                server_keys = [i for i in response.json()['current_config'].keys()]
                for server_key in server_keys:
                    servers.append(response.json()['current_config'][server_key]['server_addresses'][0].split(":")[0])
                    # split_server = .split("")
                    # servers.append(split_server[1])

                return servers
            except:
                print(f"{self.colors.FAIL}Error: Unable to retrieve ZK followers{self.colors.ENDC}")
                sys.exit(status['exit_code'])
        else:
            print(f"{self.colors.FAIL}Error: Connection timeout when connecting to: {self.url}{self.colors.ENDC}")
            sys.exit(status['exit_code'])

## 
class Kafka():
    def __init__(self, args, colors):
        self.args = args
        self.colors = colors
        self.zk_connection = f"{args.addr}:{args.client_port}"
        self.zk_broker_id_path = '/brokers/ids'
        self.zk_client = KazooClient(hosts=self.zk_connection)
        self.broker_hosts = []
        self.broker_string = ""

    def brokers(self):
        if self._zk_client_error() == True:
            print(f"{self.colors.WARN}Error connecting to Zookeeper client at {self.zk_connection}{self.colors.ENDC}")
            sys.exit(1)
        else:
            print("Successful connection to Zookeeper")


        broker_ids = self._get_broker_ids()

        if broker_ids == False:
            print(f"{self.colors.WARN}Error: no Kafka brokers found in Zookeeper path{self.colors.ENDC}")
            sys.exit(0)

        #print(broker_ids)

        for id in broker_ids:
            self.broker_hosts.append(self._get_broker_info(id))

        for broker in self.broker_hosts:
            self.broker_string += f"{broker}\n"

        return self.broker_string.rstrip()


    def _get_broker_ids(self):
        self.zk_client.start()
        if self.zk_client.exists(self.zk_broker_id_path):
            broker_ids = self.zk_client.get_children(self.zk_broker_id_path)
            self.zk_client.stop()
            return broker_ids
        else:
            self.zk_client.stop()
            return False

    def _get_broker_info(self,broker_id):
        self.zk_client.start()
        broker_data = f'{self.zk_broker_id_path}/{broker_id}'
        try:
            data, _ = self.zk_client.get(broker_data)
            data_json = json.loads(data.decode('utf-8'))
            return data_json['host']
        except:
            return f'Error retrieving broker: {broker_id}'

    def _zk_client_error(self):
        try:
            self.zk_client.start()
            self.zk_client.stop()
            return False
        except:
            return True

class TextColors():
    def __init__(self):
        self.HEADER = '\033[95m'
        self.OKBLUE = '\033[94m'
        self.OKGREEN = '\033[92m'
        self.WARN = '\033[93m'
        self.FAIL = '\033[91m'
        self.ENDC = '\033[0m'
        self.BOLD = '\033[1m'
        self.UNDERLINE = '\033[4m'

if __name__ == '__main__':
    main()
